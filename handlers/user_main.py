import sqlite3
import dotenv

from aiogram import Router, F
from aiogram.types import Message

from data.functions import user_reg_check, generate_schools_ikb, get_school_list
from keyboards.inline import tasks_ikb, user_history_ikb
from keyboards.reply import user_stats

dotenv.load_dotenv(dotenv.find_dotenv())
router = Router()


@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏")
async def add_card(message: Message):
    if user_reg_check(message.from_user.id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. "
                             "(–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏)")
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ü–µ–ª—è—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()
        user_data = cursor.execute(
            f"SELECT school, class, letter FROM users WHERE username = '{message.from_user.id}'").fetchone()

        done_tasks = cursor.execute(f"SELECT name FROM done WHERE user_id='{message.from_user.id}' AND "
                                    f"school = '{user_data[0]}' AND class = '{user_data[1]}' AND letter = '{user_data[2]}'").fetchall()
        my_tasks = cursor.execute(f"SELECT name, description, price, date_finish, must FROM tasks WHERE "
                                  f"school = '{user_data[0]}' AND class = '{user_data[1]}' AND letter = '{user_data[2]}'").fetchall()

        for done_task in done_tasks:
            for task in my_tasks:
                if done_task[0] == task[0]:
                    my_tasks.remove(task)

        try:
            await message.answer(f"""*–ù–∞–∑–≤–∞–Ω–∏–µ:* {my_tasks[0][0]}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {my_tasks[0][1]}
*–°—É–º–º–∞ (—á–µ–ª):* {my_tasks[0][2]} ‚ÇΩ
*–î–µ–¥–ª–∞–π–Ω:* {my_tasks[0][3]}   
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {my_tasks[0][4]}""", parse_mode="MARKDOWN", reply_markup=tasks_ikb)

            connection.commit()
            cursor.close()

        except IndexError:
            await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç ‚úÖ")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞",
                             reply_markup=generate_schools_ikb(get_school_list()))


@router.message(F.text == "–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def stats(message: Message):
    if user_reg_check(message.from_user.id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª", reply_markup=user_stats)


@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ üìú")
async def stats(message: Message):
    if user_reg_check(message.from_user.id):
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()

        done_info = cursor.execute(f"SELECT name, school, class, letter FROM done WHERE user_id = '{message.from_user.id}'").fetchall()
        tasks_info = []
        for item in done_info:
            data = cursor.execute(f"SELECT * FROM tasks WHERE name='{item[0]}' AND school='{item[1]}' AND class='{item[2]}' AND "
                                       f"letter='{item[3]}'").fetchone()
            if data:
                tasks_info.append(data)
            else:
                tasks_info.append([item[0], "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–∞–∑–Ω–∞—á–µ–µ–º", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–∞–∑–Ω–∞—á–µ–µ–º", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–∞–∑–Ω–∞—á–µ–µ–º", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–∞–∑–Ω–∞—á–µ–µ–º"])

        connection.commit()
        cursor.close()

        if len(done_info) != 0:
            await message.answer(f"""‚úÖ *–¶–ï–õ–¨ –û–ü–õ–ê–ß–ï–ù–ê* ‚úÖ
            
*–ù–∞–∑–≤–∞–Ω–∏–µ:* {tasks_info[0][0]}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {tasks_info[0][1]}
*–°—É–º–º–∞ (—á–µ–ª):* {tasks_info[0][2]} ‚ÇΩ
*–î–µ–¥–ª–∞–π–Ω:* {tasks_info[0][3]}   
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {tasks_info[0][4]}""", parse_mode="MARKDOWN", reply_markup=user_history_ikb)
        else:
            await message.answer("–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ü–µ–ª–∏")
