import sqlite3

from aiogram import Bot, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hitalic

from data.functions import generate_task
from keyboards.inline import my_tasks_ikb, new_must_ikb, my_tasks_ikb2
from keyboards.reply import greeting_kazna
from utils.forms import GetNewName, GetNewDesc, GetNewSumm, GetNewDate

task_indx = 0
stat_indx = 0


# –ï—Å–ª–∏ —Ü–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
async def must_func(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(must="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    all_data = await state.get_data()

    await task_confirm(all_data, state, bot, message)


# –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
async def not_must_func(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(must="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    all_data = await state.get_data()

    await task_confirm(all_data, state, bot, message)


async def next_func(callback: types.CallbackQuery, bot: Bot):
    global task_indx
    global stat_indx

    my_tasks = generate_task(callback, "no")

    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()

    if (task_indx < len(my_tasks) - 1 and callback.data.split("_")[1] == "usual") or (stat_indx < len(my_tasks) - 1 and callback.data.split("_")[1] != "usual"):
        if callback.data.split("_")[1] == "usual":
            task_indx += 1
            await callback.message.edit_text(f"""*–ù–∞–∑–≤–∞–Ω–∏–µ:* {my_tasks[task_indx][0]}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {my_tasks[task_indx][1]}
*–°—É–º–º–∞ (—á–µ–ª):* {my_tasks[task_indx][2]}
*–î–µ–¥–ª–∞–π–Ω:* {my_tasks[task_indx][3]}   
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {my_tasks[task_indx][4]}""", reply_markup=my_tasks_ikb, parse_mode="MARKDOWN")
        else:
            stat_indx += 1
            text = f"""{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {my_tasks[stat_indx][0]}
{hbold('–°—É–º–º–∞ (—á–µ–ª):')} {my_tasks[stat_indx][2]}
{hbold('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {my_tasks[stat_indx][4]}

{hbold('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö:')}\n"""

            kazna_data = cursor.execute(
                f"SELECT school, class, letter FROM kazna WHERE username = '{callback.from_user.id}'").fetchone()

            user_id = [i[0] for i in cursor.execute(
                f"SELECT user_id FROM done WHERE name='{my_tasks[stat_indx][0]}' AND school = '{kazna_data[0]}' "
                f"AND class = '{kazna_data[1]}' AND letter = '{kazna_data[2]}'").fetchall()]

            nicks = [j.username for j in [await bot.get_chat(int(i)) for i in user_id if type(i) == int]]

            for name in nicks:
                text += f"{nicks.index(name) + 1}. @{name}\n"

            await callback.message.edit_text(text, reply_markup=my_tasks_ikb2, parse_mode="HTML")

    elif (task_indx == len(my_tasks) - 1 and callback.data.split("_")[1] == "usual") or (stat_indx == len(my_tasks) - 1 and callback.data.split("_")[1] != "usual"):
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–ª—å")

    else:
        if callback.data.split("_")[1] == "usual":
            task_indx = 0
            await callback.message.edit_text(f"""*–ù–∞–∑–≤–∞–Ω–∏–µ:* {my_tasks[task_indx][0]}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {my_tasks[task_indx][1]}
*–°—É–º–º–∞ (—á–µ–ª):* {my_tasks[task_indx][2]}
*–î–µ–¥–ª–∞–π–Ω:* {my_tasks[task_indx][3]}   
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {my_tasks[task_indx][4]}""", reply_markup=my_tasks_ikb, parse_mode="MARKDOWN")
        else:
            stat_indx = 0
        text = f"""{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {my_tasks[stat_indx][0]}
{hbold('–°—É–º–º–∞ (—á–µ–ª):')} {my_tasks[stat_indx][2]}
{hbold('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {my_tasks[stat_indx][4]}
    
{hbold('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö:')}\n"""

        kazna_data = cursor.execute(
            f"SELECT school, class, letter FROM kazna WHERE username = '{callback.from_user.id}'").fetchone()

        user_id = [i[0] for i in cursor.execute(
            f"SELECT user_id FROM done WHERE name='{my_tasks[stat_indx][0]}' AND school = '{kazna_data[0]}' "
            f"AND class = '{kazna_data[1]}' AND letter = '{kazna_data[2]}'").fetchall()]

        nicks = [j.username for j in [await bot.get_chat(int(i)) for i in user_id if type(i) == int]]

        for name in nicks:
            text += f"{nicks.index(name) + 1}. @{name}\n"

        await callback.message.edit_text(text, reply_markup=my_tasks_ikb2, parse_mode="HTML")

    connection.commit()
    cursor.close()


async def back_func(callback: types.CallbackQuery, bot: Bot):
    global task_indx
    global stat_indx

    my_tasks = generate_task(callback, "no")

    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()

    if (task_indx > 0 and callback.data.split("_")[1] == "usual") or (stat_indx > 0 and callback.data.split("_")[1] != "usual"):
        if callback.data.split("_")[1] == "usual":
            task_indx -= 1
            await callback.message.edit_text(f"""*–ù–∞–∑–≤–∞–Ω–∏–µ:* {my_tasks[task_indx][0]}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {my_tasks[task_indx][1]}
*–°—É–º–º–∞ (—á–µ–ª):* {my_tasks[task_indx][2]}
*–î–µ–¥–ª–∞–π–Ω:* {my_tasks[task_indx][3]}   
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {my_tasks[task_indx][4]}""", reply_markup=my_tasks_ikb, parse_mode="MARKDOWN")
        else:
            stat_indx -= 1
            text = f"""{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {my_tasks[stat_indx][0]}
{hbold('–°—É–º–º–∞ (—á–µ–ª):')} {my_tasks[stat_indx][2]}
{hbold('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {my_tasks[stat_indx][4]}

{hbold('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö:')}\n"""

            kazna_data = cursor.execute(
                f"SELECT school, class, letter FROM kazna WHERE username = '{callback.from_user.id}'").fetchone()

            user_id = [i[0] for i in cursor.execute(
                f"SELECT user_id FROM done WHERE name='{my_tasks[stat_indx][0]}' AND school = '{kazna_data[0]}' "
                f"AND class = '{kazna_data[1]}' AND letter = '{kazna_data[2]}'").fetchall()]

            nicks = [j.username for j in [await bot.get_chat(int(i)) for i in user_id if type(i) == int]]

            for name in nicks:
                text += f"{nicks.index(name) + 1}. @{name}\n"

            await callback.message.edit_text(text, reply_markup=my_tasks_ikb2, parse_mode="HTML")

    elif (task_indx == 0 and callback.data.split("_")[1] == "usual") or (stat_indx == 0 and callback.data.split("_")[1] != "usual"):
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ü–µ–ª—å")

    else:
        if callback.data.split("_")[1] == "usual":
            task_indx = 0
            await callback.message.edit_text(f"""*–ù–∞–∑–≤–∞–Ω–∏–µ:* {my_tasks[task_indx][0]}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {my_tasks[task_indx][1]}
*–°—É–º–º–∞ (—á–µ–ª):* {my_tasks[task_indx][2]}
*–î–µ–¥–ª–∞–π–Ω:* {my_tasks[task_indx][3]}   
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {my_tasks[task_indx][4]}""", reply_markup=my_tasks_ikb, parse_mode="MARKDOWN")
        else:
            stat_indx = 0
        text = f"""{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {my_tasks[stat_indx][0]}
{hbold('–°—É–º–º–∞ (—á–µ–ª):')} {my_tasks[stat_indx][2]}
{hbold('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')} {my_tasks[stat_indx][4]}
    
{hbold('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö:')}\n"""

        kazna_data = cursor.execute(
            f"SELECT school, class, letter FROM kazna WHERE username = '{callback.from_user.id}'").fetchone()

        user_id = [i[0] for i in cursor.execute(
            f"SELECT user_id FROM done WHERE name='{my_tasks[stat_indx][0]}' AND school = '{kazna_data[0]}' "
            f"AND class = '{kazna_data[1]}' AND letter = '{kazna_data[2]}'").fetchall()]

        nicks = [j.username for j in [await bot.get_chat(int(i)) for i in user_id if type(i) == int]]

        for name in nicks:
            text += f"{nicks.index(name) + 1}. @{name}\n"

        await callback.message.edit_text(text, reply_markup=my_tasks_ikb2, parse_mode="HTML")
    connection.commit()
    cursor.close()


# –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏
async def task_confirm(all_data, state, bot, message):
    total_text = f"""{hbold('–¶–ï–õ–¨ –°–û–ó–î–ê–ù–ê üéâ')}

{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {all_data['name'].capitalize()}
{hbold('–û–ø–∏—Å–∞–Ω–∏–µ:')} {all_data['desc'].capitalize()}
{hbold('–°—É–º–º–∞ (—Å —á–µ–ª–æ–≤–µ–∫–∞):')} {all_data['price']} —Ä—É–±. 
{hbold('–î–µ–¥–ª–∞–π–Ω:')} –¥–æ {all_data['date']}
{hbold('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å:')} {all_data['must']}

{hitalic('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')}"""

    try:
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∑–Ω–∞—á–µ–µ
        comittee_info = cursor.execute(f"SELECT school, class, letter FROM kazna WHERE username = '{message.from_user.id}'").fetchone()

        cursor.execute(f"INSERT INTO tasks (name, description, price, date_finish, must, school, class, letter) VALUES "
                       f"('{all_data['name'].capitalize()}', '{all_data['desc'].capitalize()}', {int(all_data['price'])}, "
                       f"'{all_data['date']}', '{all_data['must']}', '{comittee_info[0]}', '{comittee_info[1]}', '{comittee_info[2]}');")

        connection.commit()
        cursor.close()

        await state.clear()
        await bot.send_message(message.from_user.id,
                               total_text,
                               parse_mode=ParseMode.HTML,
                               reply_markup=greeting_kazna)

    except ValueError:
        await state.clear()
        await bot.send_message(message.from_user.id,
                               "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—É–º–º—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ "
                               "—Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=greeting_kazna)


async def edit_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: ")
    await state.set_state(GetNewName.NEW_NAME)


async def edit_desc(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏: ")
    await state.set_state(GetNewDesc.NEW_DESC)


async def edit_summ(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(GetNewSumm.NEW_SUMM)


async def edit_date(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ (—Ñ–æ—Ä–º–∞—Ç 01.12.2023): ")
    await state.set_state(GetNewDate.NEW_DATE)


async def edit_must(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ª–∏ —Ü–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è", reply_markup=new_must_ikb)


async def new_must(callback: types.CallbackQuery):
    indx = task_indx
    task = generate_task(callback, "no")
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    kd = cursor.execute(f"SELECT school, class, letter FROM kazna WHERE username = '{callback.from_user.id}'").fetchone()
    cursor.execute(
        f"UPDATE tasks SET must='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' WHERE school = '{kd[0]}' AND class = '{kd[1]}' "
        f"AND letter = '{kd[2]}' AND name='{task[indx][0]}'")
    connection.commit()
    cursor.close()

    await callback.message.answer("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–µ–ª–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=greeting_kazna)


async def new_not_must(callback: types.CallbackQuery):
    indx = task_indx
    task = generate_task(callback, "no")
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    kd = cursor.execute(f"SELECT school, class, letter FROM kazna WHERE username = '{callback.from_user.id}'").fetchone()
    cursor.execute(
        f"UPDATE tasks SET must='–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' WHERE school = '{kd[0]}' AND class = '{kd[1]}' "
        f"AND letter = '{kd[2]}' AND name='{task[indx][0]}'")
    connection.commit()
    cursor.close()

    await callback.message.answer("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–µ–ª–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=greeting_kazna)