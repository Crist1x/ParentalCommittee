import sqlite3

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hitalic

from keyboards.reply import greeting_admin


# –ï—Å–ª–∏ —Ü–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
async def must_func(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(must="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    all_data = await state.get_data()

    await task_confirm(all_data, state, bot, message)


# –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
async def not_must_func(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(must="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    all_data = await state.get_data()

    await task_confirm(all_data, state, bot, message)


# –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏
async def task_confirm(all_data, state, bot, message):
    total_text = f"""{hbold('–¶–ï–õ–¨ –°–û–ó–î–ê–ù–ê üéâ')}

{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {all_data['name'].capitalize()}
{hbold('–û–ø–∏—Å–∞–Ω–∏–µ:')} {all_data['desc'].capitalize()}
{hbold('–°—É–º–º–∞ (—Å —á–µ–ª–æ–≤–µ–∫–∞):')} {all_data['price']} —Ä—É–±. 
{hbold('–î–µ–¥–ª–∞–π–Ω:')} –¥–æ {all_data['date']}
{hbold('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å:')} {all_data['must']}

{hitalic('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')}"""

    try:
        connection = sqlite3.connect('db/database.db')
        cursor = connection.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∑–Ω–∞—á–µ–µ
        comittee_info = cursor.execute(f"SELECT school, class, letter FROM admin WHERE username = '{message.from_user.username}'").fetchone()

        cursor.execute(f"INSERT INTO tasks (name, description, price, date_finish, must, school, class, letter) VALUES "
                       f"('{all_data['name'].capitalize()}', '{all_data['desc'].capitalize()}', {int(all_data['price'])}, "
                       f"'{all_data['date']}', '{all_data['must']}', '{comittee_info[0]}', '{comittee_info[1]}', '{comittee_info[2]}');")

        connection.commit()
        cursor.close()

        await state.clear()
        await bot.send_message(message.from_user.id,
                               total_text,
                               parse_mode=ParseMode.HTML,
                               reply_markup=greeting_admin)

    except ValueError:
        await state.clear()
        await bot.send_message(message.from_user.id,
                               "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—É–º–º—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ "
                               "—Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=greeting_admin)
